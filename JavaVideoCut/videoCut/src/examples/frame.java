/*
 * Copyright (c) 2010, Oracle. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Oracle nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

package examples;

import java.io.File;
import javax.swing.JFileChooser;
import com.github.tonydeng.fmj.runner.FFmpegCommandRunner;
import com.github.tonydeng.fmj.utils.RemoveBlackBorder;
import it.sauronsoftware.jave.Encoder;
import it.sauronsoftware.jave.MultimediaInfo;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import static java.lang.Integer.max;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class frame extends javax.swing.JFrame {
    
    private List<String> videoFile = new ArrayList<String>();
    private String dirPath;
    private String curProcess;
    private File curVideoFile;
    
    
    /**
     * Creates new form ContactEditor
     */
    public frame() {
        initComponents();
//        this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);//全屏打开
        this.setFocusable(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        btn_delete = new javax.swing.JButton();
        btn_ok = new javax.swing.JButton();
        info = new javax.swing.JLabel();
        btn_open = new javax.swing.JButton();
        image = new javax.swing.JLabel();
        fileName = new javax.swing.JLabel();
        start = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("视频截图");
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        btn_delete.setText("删除(→)");
        btn_delete.setActionCommand("delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });
        btn_delete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btn_deleteKeyPressed(evt);
            }
        });

        btn_ok.setText("合格(s)");
        btn_ok.setActionCommand("ok");
        btn_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_okActionPerformed(evt);
            }
        });
        btn_ok.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btn_okKeyPressed(evt);
            }
        });

        info.setText("待处理文件");

        btn_open.setText("文件");
        btn_open.setActionCommand("openDir");
        btn_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_openActionPerformed(evt);
            }
        });
        btn_open.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btn_openKeyPressed(evt);
            }
        });

        fileName.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        fileName.setToolTipText("");

        start.setText("截图(←)");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });
        start.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                startKeyPressed(evt);
            }
        });

        fileList.setEnabled(false);
        fileList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileListKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(fileList);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
            .add(layout.createSequentialGroup()
                .add(23, 23, 23)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btn_open, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 132, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 324, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(11, 11, 11)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(fileName)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(image, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(info))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap(811, Short.MAX_VALUE)
                .add(start, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(28, 28, 28)
                .add(btn_ok, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(26, 26, 26)
                .add(btn_delete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(fileName)
                    .add(btn_open, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(info)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                    .add(image, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(start, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 79, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btn_delete, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, btn_ok, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
        System.gc();
        File videoFile = new File(this.curProcess);
        System.out.print(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
        File picFile = new File(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
        boolean vd = true;
        boolean pd = true;
        if(!videoFile.delete())
        {
            JOptionPane.showMessageDialog(this,videoFile.getName() + "删除失败！");
            vd = false;
            
        }
        if(!picFile.delete())
        {
            JOptionPane.showMessageDialog(this,picFile.getName() + "删除失败！");
            pd = false;
        }
        
        if(this.videoFile.size() >= 1 && pd && vd )
        {
            this.videoFile.remove(0);
            Vector<String> v = new Vector<String>();
            v.addAll(this.videoFile);
            this.fileList.setListData(v);
            
            if(this.videoFile.isEmpty())
            {
                JOptionPane.showMessageDialog(this,"视频全部处理完成！");
            }
            else
            {
                this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
//        System.out.print(this.curProcess);
                videoFile = new File(this.curProcess);
                long videoTime = this.ReadVideoTime(videoFile);
                Random random = new Random();
//        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);
 
                 
                File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                RemoveBlackBorder rb = new RemoveBlackBorder();
                try {
                    rb.removeBlackBorder(img);
        //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                } catch (Exception ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                        ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                        imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                        this.image.setIcon(imageIcon);
                    } catch (IOException ex) {
                        Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                this.fileName.setText(videoFile.getName());
                this.image.updateUI();
                 this.setFocusable(true);
            }
        }
        
          
        
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_okActionPerformed
        // TODO add your handling code here:
        if(this.videoFile.size() >= 1)
        {
            this.videoFile.remove(0);
            
            if(this.videoFile.isEmpty())
            {
                JOptionPane.showMessageDialog(this,"视频全部处理完成！");
            }
            else
            {
                this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
//        System.out.print(this.curProcess);
                File videoFile = new File(this.curProcess);
                long videoTime = this.ReadVideoTime(videoFile);
                Random random = new Random();
//        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);
 
                 
                File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                RemoveBlackBorder rb = new RemoveBlackBorder();
                try {
                    rb.removeBlackBorder(img);
        //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                } catch (Exception ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                try {
                        ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                        imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                        this.image.setIcon(imageIcon);
                    } catch (IOException ex) {
                        Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                this.fileName.setText(videoFile.getName());
                this.image.updateUI();
            }
        }
        
        Vector<String> v = new Vector<String>();
            v.addAll(this.videoFile);
            this.fileList.setListData(v);
             this.setFocusable(true);
    }//GEN-LAST:event_btn_okActionPerformed

    private void btn_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_openActionPerformed
        // TODO add your handling code here:
        
                JFileChooser fc = new  JFileChooser();
                fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);//设置只能选择目录
                fc.showOpenDialog(null);
                File f = fc.getSelectedFile();
                System.out.print(f.getAbsolutePath());
                dirPath = f.getAbsolutePath();//获取单行文本内容保存到字符串dirPath中
                File dir=new File(dirPath);//将字符串dirPath封装成文件

                //如果文件存在，而且是个目录执行下列操作
                if(dir.exists() &&dir.isDirectory())
                {
                    String[] dirs = dir.list();//文件目录列表存放到字符数组中
                    this.videoFile.clear();
                    for (String file : dirs)
                    {
                        String suffix = file.substring(file.lastIndexOf(".") + 1);  
                        if (suffix.equals("mp4") || suffix.equals("MP4") )
                        {
                            this.videoFile.add(file);
            
                        }
            
                    }
                    
                    Vector<String> v = new Vector<String>();
                    v.addAll(this.videoFile);
                    
                    this.fileList.setListData(v);
     
                }      
    }//GEN-LAST:event_btn_openActionPerformed

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        // TODO add your handling code here:
        this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
//        System.out.print(this.curProcess);
        File videoFile = new File(this.curProcess);
        long videoTime = this.ReadVideoTime(videoFile);
        Random random = new Random();
//        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);
 
        File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
        RemoveBlackBorder rb = new RemoveBlackBorder();
        try {
            rb.removeBlackBorder(img);
//        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
        } catch (Exception ex) {
            Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
         try {
            ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
            imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
            this.image.setIcon(imageIcon);
        } catch (IOException ex) {
            Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
        }
         
        this.fileName.setText(videoFile.getName());
         System.gc();
         this.setFocusable(true);
    }//GEN-LAST:event_startActionPerformed

    private void startKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startKeyPressed
       // TODO add your handling code here:
        System.out.print(evt.getKeyCode());
        
        if(evt.getKeyCode() == 37) // zuo 
        {
                    // TODO add your handling code here:
                this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
        //        System.out.print(this.curProcess);
                File videoFile = new File(this.curProcess);
                long videoTime = this.ReadVideoTime(videoFile);
                Random random = new Random();
        //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);

                File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                RemoveBlackBorder rb = new RemoveBlackBorder();
                try {
                    rb.removeBlackBorder(img);
        //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                } catch (Exception ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                 try {
                    ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                    imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                    this.image.setIcon(imageIcon);
                } catch (IOException ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                this.fileName.setText(videoFile.getName());
                 System.gc();
                 this.setFocusable(true);
        }
        else if(evt.getKeyCode() == 39) // you
        {
             // TODO add your handling code here:
                System.gc();
                File videoFile = new File(this.curProcess);
                System.out.print(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
                File picFile = new File(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
                boolean vd = true;
                boolean pd = true;
                if(!videoFile.delete())
                {
                    JOptionPane.showMessageDialog(this,videoFile.getName() + "删除失败！");
                    vd = false;

                }
                if(!picFile.delete())
                {
                    JOptionPane.showMessageDialog(this,picFile.getName() + "删除失败！");
                    pd = false;
                }

                if(this.videoFile.size() >= 1 && pd && vd )
                {
                    this.videoFile.remove(0);
                    Vector<String> v = new Vector<String>();
                    v.addAll(this.videoFile);
                    this.fileList.setListData(v);

                    if(this.videoFile.isEmpty())
                    {
                        JOptionPane.showMessageDialog(this,"视频全部处理完成！");
                    }
                    else
                    {
                        this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
        //        System.out.print(this.curProcess);
                        videoFile = new File(this.curProcess);
                        long videoTime = this.ReadVideoTime(videoFile);
                        Random random = new Random();
        //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);


                        File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                        RemoveBlackBorder rb = new RemoveBlackBorder();
                        try {
                            rb.removeBlackBorder(img);
                //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                        } catch (Exception ex) {
                            Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                                ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                                imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                                this.image.setIcon(imageIcon);
                            } catch (IOException ex) {
                                Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        this.fileName.setText(videoFile.getName());
                        this.image.updateUI();
                         this.setFocusable(true);
                    }
                }
        }
        else if(evt.getKeyCode() == 83) // hege 
        {
                // TODO add your handling code here:
           if(this.videoFile.size() >= 1)
           {
               this.videoFile.remove(0);

               if(this.videoFile.isEmpty())
               {
                   JOptionPane.showMessageDialog(this,"视频全部处理完成！");
               }
               else
               {
                   this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
   //        System.out.print(this.curProcess);
                   File videoFile = new File(this.curProcess);
                   long videoTime = this.ReadVideoTime(videoFile);
                   Random random = new Random();
   //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);


                   File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                   RemoveBlackBorder rb = new RemoveBlackBorder();
                   try {
                       rb.removeBlackBorder(img);
           //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                   } catch (Exception ex) {
                       Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                   }

                   try {
                           ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                           imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                           this.image.setIcon(imageIcon);
                       } catch (IOException ex) {
                           Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                       }
                   this.fileName.setText(videoFile.getName());
                   this.image.updateUI();
               }
        }
        
        Vector<String> v = new Vector<String>();
            v.addAll(this.videoFile);
            this.fileList.setListData(v);
             this.setFocusable(true);
        }
      
       
                          
    }//GEN-LAST:event_startKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        System.out.print(evt.getKeyCode());
        
        if(evt.getKeyCode() == 37) // zuo 
        {
                    // TODO add your handling code here:
                this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
        //        System.out.print(this.curProcess);
                File videoFile = new File(this.curProcess);
                long videoTime = this.ReadVideoTime(videoFile);
                Random random = new Random();
        //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);

                File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                RemoveBlackBorder rb = new RemoveBlackBorder();
                try {
                    rb.removeBlackBorder(img);
        //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                } catch (Exception ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                 try {
                    ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                    imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                    this.image.setIcon(imageIcon);
                } catch (IOException ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                this.fileName.setText(videoFile.getName());
                 System.gc();
                 this.setFocusable(true);
        }
        else if(evt.getKeyCode() == 39) // you
        {
             // TODO add your handling code here:
                System.gc();
                File videoFile = new File(this.curProcess);
                System.out.print(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
                File picFile = new File(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
                boolean vd = true;
                boolean pd = true;
                if(!videoFile.delete())
                {
                    JOptionPane.showMessageDialog(this,videoFile.getName() + "删除失败！");
                    vd = false;

                }
                if(!picFile.delete())
                {
                    JOptionPane.showMessageDialog(this,picFile.getName() + "删除失败！");
                    pd = false;
                }

                if(this.videoFile.size() >= 1 && pd && vd )
                {
                    this.videoFile.remove(0);
                    Vector<String> v = new Vector<String>();
                    v.addAll(this.videoFile);
                    this.fileList.setListData(v);

                    if(this.videoFile.isEmpty())
                    {
                        JOptionPane.showMessageDialog(this,"视频全部处理完成！");
                    }
                    else
                    {
                        this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
        //        System.out.print(this.curProcess);
                        videoFile = new File(this.curProcess);
                        long videoTime = this.ReadVideoTime(videoFile);
                        Random random = new Random();
        //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);


                        File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                        RemoveBlackBorder rb = new RemoveBlackBorder();
                        try {
                            rb.removeBlackBorder(img);
                //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                        } catch (Exception ex) {
                            Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                                ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                                imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                                this.image.setIcon(imageIcon);
                            } catch (IOException ex) {
                                Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        this.fileName.setText(videoFile.getName());
                        this.image.updateUI();
                         this.setFocusable(true);
                    }
                }
        }
        else if(evt.getKeyCode() == 83) // hege 
        {
                // TODO add your handling code here:
           if(this.videoFile.size() >= 1)
           {
               this.videoFile.remove(0);

               if(this.videoFile.isEmpty())
               {
                   JOptionPane.showMessageDialog(this,"视频全部处理完成！");
               }
               else
               {
                   this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
   //        System.out.print(this.curProcess);
                   File videoFile = new File(this.curProcess);
                   long videoTime = this.ReadVideoTime(videoFile);
                   Random random = new Random();
   //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);


                   File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                   RemoveBlackBorder rb = new RemoveBlackBorder();
                   try {
                       rb.removeBlackBorder(img);
           //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                   } catch (Exception ex) {
                       Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                   }

                   try {
                           ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                           imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                           this.image.setIcon(imageIcon);
                       } catch (IOException ex) {
                           Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                       }
                   this.fileName.setText(videoFile.getName());
                   this.image.updateUI();
               }
        }
        
        Vector<String> v = new Vector<String>();
            v.addAll(this.videoFile);
            this.fileList.setListData(v);
             this.setFocusable(true);
        }
      
       
    }//GEN-LAST:event_formKeyPressed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formKeyTyped

    private void btn_okKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btn_okKeyPressed
        // TODO add your handling code here:
        // TODO add your handling code here:
        System.out.print(evt.getKeyCode());
        
        if(evt.getKeyCode() == 37) // zuo 
        {
                    // TODO add your handling code here:
                this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
        //        System.out.print(this.curProcess);
                File videoFile = new File(this.curProcess);
                long videoTime = this.ReadVideoTime(videoFile);
                Random random = new Random();
        //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);

                File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                RemoveBlackBorder rb = new RemoveBlackBorder();
                try {
                    rb.removeBlackBorder(img);
        //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                } catch (Exception ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                 try {
                    ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                    imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                    this.image.setIcon(imageIcon);
                } catch (IOException ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                this.fileName.setText(videoFile.getName());
                 System.gc();
                 this.setFocusable(true);
        }
        else if(evt.getKeyCode() == 39) // you
        {
             // TODO add your handling code here:
                System.gc();
                File videoFile = new File(this.curProcess);
                System.out.print(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
                File picFile = new File(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
                boolean vd = true;
                boolean pd = true;
                if(!videoFile.delete())
                {
                    JOptionPane.showMessageDialog(this,videoFile.getName() + "删除失败！");
                    vd = false;

                }
                if(!picFile.delete())
                {
                    JOptionPane.showMessageDialog(this,picFile.getName() + "删除失败！");
                    pd = false;
                }

                if(this.videoFile.size() >= 1 && pd && vd )
                {
                    this.videoFile.remove(0);
                    Vector<String> v = new Vector<String>();
                    v.addAll(this.videoFile);
                    this.fileList.setListData(v);

                    if(this.videoFile.isEmpty())
                    {
                        JOptionPane.showMessageDialog(this,"视频全部处理完成！");
                    }
                    else
                    {
                        this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
        //        System.out.print(this.curProcess);
                        videoFile = new File(this.curProcess);
                        long videoTime = this.ReadVideoTime(videoFile);
                        Random random = new Random();
        //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);


                        File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                        RemoveBlackBorder rb = new RemoveBlackBorder();
                        try {
                            rb.removeBlackBorder(img);
                //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                        } catch (Exception ex) {
                            Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                                ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                                imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                                this.image.setIcon(imageIcon);
                            } catch (IOException ex) {
                                Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        this.fileName.setText(videoFile.getName());
                        this.image.updateUI();
                         this.setFocusable(true);
                    }
                }
        }
        else if(evt.getKeyCode() == 83) // hege 
        {
                // TODO add your handling code here:
           if(this.videoFile.size() >= 1)
           {
               this.videoFile.remove(0);

               if(this.videoFile.isEmpty())
               {
                   JOptionPane.showMessageDialog(this,"视频全部处理完成！");
               }
               else
               {
                   this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
   //        System.out.print(this.curProcess);
                   File videoFile = new File(this.curProcess);
                   long videoTime = this.ReadVideoTime(videoFile);
                   Random random = new Random();
   //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);


                   File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                   RemoveBlackBorder rb = new RemoveBlackBorder();
                   try {
                       rb.removeBlackBorder(img);
           //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                   } catch (Exception ex) {
                       Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                   }

                   try {
                           ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                           imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                           this.image.setIcon(imageIcon);
                       } catch (IOException ex) {
                           Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                       }
                   this.fileName.setText(videoFile.getName());
                   this.image.updateUI();
               }
        }
        
        Vector<String> v = new Vector<String>();
            v.addAll(this.videoFile);
            this.fileList.setListData(v);
             this.setFocusable(true);
        }
      
       
    }//GEN-LAST:event_btn_okKeyPressed

    private void btn_deleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btn_deleteKeyPressed
        // TODO add your handling code here:
        // TODO add your handling code here:
        System.out.print(evt.getKeyCode());
        
        if(evt.getKeyCode() == 37) // zuo 
        {
                    // TODO add your handling code here:
                this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
        //        System.out.print(this.curProcess);
                File videoFile = new File(this.curProcess);
                long videoTime = this.ReadVideoTime(videoFile);
                Random random = new Random();
        //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);

                File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                RemoveBlackBorder rb = new RemoveBlackBorder();
                try {
                    rb.removeBlackBorder(img);
        //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                } catch (Exception ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                 try {
                    ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                    imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                    this.image.setIcon(imageIcon);
                } catch (IOException ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                this.fileName.setText(videoFile.getName());
                 System.gc();
                 this.setFocusable(true);
        }
        else if(evt.getKeyCode() == 39) // you
        {
             // TODO add your handling code here:
                System.gc();
                File videoFile = new File(this.curProcess);
                System.out.print(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
                File picFile = new File(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
                boolean vd = true;
                boolean pd = true;
                if(!videoFile.delete())
                {
                    JOptionPane.showMessageDialog(this,videoFile.getName() + "删除失败！");
                    vd = false;

                }
                if(!picFile.delete())
                {
                    JOptionPane.showMessageDialog(this,picFile.getName() + "删除失败！");
                    pd = false;
                }

                if(this.videoFile.size() >= 1 && pd && vd )
                {
                    this.videoFile.remove(0);
                    Vector<String> v = new Vector<String>();
                    v.addAll(this.videoFile);
                    this.fileList.setListData(v);

                    if(this.videoFile.isEmpty())
                    {
                        JOptionPane.showMessageDialog(this,"视频全部处理完成！");
                    }
                    else
                    {
                        this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
        //        System.out.print(this.curProcess);
                        videoFile = new File(this.curProcess);
                        long videoTime = this.ReadVideoTime(videoFile);
                        Random random = new Random();
        //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);


                        File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                        RemoveBlackBorder rb = new RemoveBlackBorder();
                        try {
                            rb.removeBlackBorder(img);
                //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                        } catch (Exception ex) {
                            Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                                ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                                imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                                this.image.setIcon(imageIcon);
                            } catch (IOException ex) {
                                Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        this.fileName.setText(videoFile.getName());
                        this.image.updateUI();
                         this.setFocusable(true);
                    }
                }
        }
        else if(evt.getKeyCode() == 83) // hege 
        {
                // TODO add your handling code here:
           if(this.videoFile.size() >= 1)
           {
               this.videoFile.remove(0);

               if(this.videoFile.isEmpty())
               {
                   JOptionPane.showMessageDialog(this,"视频全部处理完成！");
               }
               else
               {
                   this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
   //        System.out.print(this.curProcess);
                   File videoFile = new File(this.curProcess);
                   long videoTime = this.ReadVideoTime(videoFile);
                   Random random = new Random();
   //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);


                   File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                   RemoveBlackBorder rb = new RemoveBlackBorder();
                   try {
                       rb.removeBlackBorder(img);
           //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                   } catch (Exception ex) {
                       Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                   }

                   try {
                           ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                           imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                           this.image.setIcon(imageIcon);
                       } catch (IOException ex) {
                           Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                       }
                   this.fileName.setText(videoFile.getName());
                   this.image.updateUI();
               }
        }
        
        Vector<String> v = new Vector<String>();
            v.addAll(this.videoFile);
            this.fileList.setListData(v);
             this.setFocusable(true);
        }
      
       
    }//GEN-LAST:event_btn_deleteKeyPressed

    private void fileListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileListKeyPressed
        // TODO add your handling code here:
        // TODO add your handling code here:
        System.out.print(evt.getKeyCode());
        
        if(evt.getKeyCode() == 37) // zuo 
        {
                    // TODO add your handling code here:
                this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
        //        System.out.print(this.curProcess);
                File videoFile = new File(this.curProcess);
                long videoTime = this.ReadVideoTime(videoFile);
                Random random = new Random();
        //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);

                File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                RemoveBlackBorder rb = new RemoveBlackBorder();
                try {
                    rb.removeBlackBorder(img);
        //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                } catch (Exception ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                 try {
                    ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                    imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                    this.image.setIcon(imageIcon);
                } catch (IOException ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                this.fileName.setText(videoFile.getName());
                 System.gc();
                 this.setFocusable(true);
        }
        else if(evt.getKeyCode() == 39) // you
        {
             // TODO add your handling code here:
                System.gc();
                File videoFile = new File(this.curProcess);
                System.out.print(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
                File picFile = new File(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
                boolean vd = true;
                boolean pd = true;
                if(!videoFile.delete())
                {
                    JOptionPane.showMessageDialog(this,videoFile.getName() + "删除失败！");
                    vd = false;

                }
                if(!picFile.delete())
                {
                    JOptionPane.showMessageDialog(this,picFile.getName() + "删除失败！");
                    pd = false;
                }

                if(this.videoFile.size() >= 1 && pd && vd )
                {
                    this.videoFile.remove(0);
                    Vector<String> v = new Vector<String>();
                    v.addAll(this.videoFile);
                    this.fileList.setListData(v);

                    if(this.videoFile.isEmpty())
                    {
                        JOptionPane.showMessageDialog(this,"视频全部处理完成！");
                    }
                    else
                    {
                        this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
        //        System.out.print(this.curProcess);
                        videoFile = new File(this.curProcess);
                        long videoTime = this.ReadVideoTime(videoFile);
                        Random random = new Random();
        //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);


                        File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                        RemoveBlackBorder rb = new RemoveBlackBorder();
                        try {
                            rb.removeBlackBorder(img);
                //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                        } catch (Exception ex) {
                            Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                                ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                                imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                                this.image.setIcon(imageIcon);
                            } catch (IOException ex) {
                                Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        this.fileName.setText(videoFile.getName());
                        this.image.updateUI();
                         this.setFocusable(true);
                    }
                }
        }
        else if(evt.getKeyCode() == 83) // hege 
        {
                // TODO add your handling code here:
           if(this.videoFile.size() >= 1)
           {
               this.videoFile.remove(0);

               if(this.videoFile.isEmpty())
               {
                   JOptionPane.showMessageDialog(this,"视频全部处理完成！");
               }
               else
               {
                   this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
   //        System.out.print(this.curProcess);
                   File videoFile = new File(this.curProcess);
                   long videoTime = this.ReadVideoTime(videoFile);
                   Random random = new Random();
   //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);


                   File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                   RemoveBlackBorder rb = new RemoveBlackBorder();
                   try {
                       rb.removeBlackBorder(img);
           //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                   } catch (Exception ex) {
                       Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                   }

                   try {
                           ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                           imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                           this.image.setIcon(imageIcon);
                       } catch (IOException ex) {
                           Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                       }
                   this.fileName.setText(videoFile.getName());
                   this.image.updateUI();
               }
        }
        
        Vector<String> v = new Vector<String>();
            v.addAll(this.videoFile);
            this.fileList.setListData(v);
             this.setFocusable(true);
        }
      
       
    }//GEN-LAST:event_fileListKeyPressed

    private void btn_openKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btn_openKeyPressed
        // TODO add your handling code here:
        // TODO add your handling code here:
        System.out.print(evt.getKeyCode());
        
        if(evt.getKeyCode() == 37) // zuo 
        {
                    // TODO add your handling code here:
                this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
        //        System.out.print(this.curProcess);
                File videoFile = new File(this.curProcess);
                long videoTime = this.ReadVideoTime(videoFile);
                Random random = new Random();
        //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);

                File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                RemoveBlackBorder rb = new RemoveBlackBorder();
                try {
                    rb.removeBlackBorder(img);
        //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                } catch (Exception ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                 try {
                    ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                    imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                    this.image.setIcon(imageIcon);
                } catch (IOException ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                this.fileName.setText(videoFile.getName());
                 System.gc();
                 this.setFocusable(true);
        }
        else if(evt.getKeyCode() == 39) // you
        {
             // TODO add your handling code here:
                System.gc();
                File videoFile = new File(this.curProcess);
                System.out.print(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
                File picFile = new File(this.curProcess.substring(0,this.curProcess.lastIndexOf('.')) + ".jpg");
                boolean vd = true;
                boolean pd = true;
                if(!videoFile.delete())
                {
                    JOptionPane.showMessageDialog(this,videoFile.getName() + "删除失败！");
                    vd = false;

                }
                if(!picFile.delete())
                {
                    JOptionPane.showMessageDialog(this,picFile.getName() + "删除失败！");
                    pd = false;
                }

                if(this.videoFile.size() >= 1 && pd && vd )
                {
                    this.videoFile.remove(0);
                    Vector<String> v = new Vector<String>();
                    v.addAll(this.videoFile);
                    this.fileList.setListData(v);

                    if(this.videoFile.isEmpty())
                    {
                        JOptionPane.showMessageDialog(this,"视频全部处理完成！");
                    }
                    else
                    {
                        this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
        //        System.out.print(this.curProcess);
                        videoFile = new File(this.curProcess);
                        long videoTime = this.ReadVideoTime(videoFile);
                        Random random = new Random();
        //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);


                        File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                        RemoveBlackBorder rb = new RemoveBlackBorder();
                        try {
                            rb.removeBlackBorder(img);
                //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                        } catch (Exception ex) {
                            Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                                ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                                imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                                this.image.setIcon(imageIcon);
                            } catch (IOException ex) {
                                Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        this.fileName.setText(videoFile.getName());
                        this.image.updateUI();
                         this.setFocusable(true);
                    }
                }
        }
        else if(evt.getKeyCode() == 83) // hege 
        {
                // TODO add your handling code here:
           if(this.videoFile.size() >= 1)
           {
               this.videoFile.remove(0);

               if(this.videoFile.isEmpty())
               {
                   JOptionPane.showMessageDialog(this,"视频全部处理完成！");
               }
               else
               {
                   this.curProcess = this.dirPath + File.separatorChar + this.videoFile.get(0);
   //        System.out.print(this.curProcess);
                   File videoFile = new File(this.curProcess);
                   long videoTime = this.ReadVideoTime(videoFile);
                   Random random = new Random();
   //        JOptionPane.showMessageDialog(null,curProcess,JOptionPane.INFORMATION_MESSAGE);


                   File img = FFmpegCommandRunner.screenshot(videoFile,random.nextInt((int)videoTime));
                   RemoveBlackBorder rb = new RemoveBlackBorder();
                   try {
                       rb.removeBlackBorder(img);
           //        this.image.setIcon(new ImageIcon(img.getAbsolutePath()));
                   } catch (Exception ex) {
                       Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                   }

                   try {
                           ImageIcon imageIcon = new ImageIcon(ImageIO.read(img));
                           imageIcon.setImage(imageIcon.getImage().getScaledInstance(image.getWidth(),image.getHeight(),Image.SCALE_DEFAULT));
                           this.image.setIcon(imageIcon);
                       } catch (IOException ex) {
                           Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                       }
                   this.fileName.setText(videoFile.getName());
                   this.image.updateUI();
               }
        }
        
        Vector<String> v = new Vector<String>();
            v.addAll(this.videoFile);
            this.fileList.setListData(v);
             this.setFocusable(true);
        }
      
       
    }//GEN-LAST:event_btn_openKeyPressed
    
    /**
     * @param args the command line arguments
     */
        private long ReadVideoTime(File source) {
        Encoder encoder = new Encoder();
//        String length = "";
        long len = 0;
        try {
            MultimediaInfo m = encoder.getInfo(source);
            len = m.getDuration()/1000;
//            int hour = (int) (ls/3600);
//            int minute = (int) (ls%3600)/60;
//            int second = (int) (ls-hour*3600-minute*60);
//            length = hour+"'"+minute+"''"+second+"'''";
        } catch (Exception e) {
            e.printStackTrace();
        }
        return len;
    }
        
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx=0; idx<installedLookAndFeels.length; idx++)
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_ok;
    private javax.swing.JButton btn_open;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JList<String> fileList;
    private javax.swing.JLabel fileName;
    private javax.swing.JLabel image;
    private javax.swing.JLabel info;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton start;
    // End of variables declaration//GEN-END:variables
    
}
